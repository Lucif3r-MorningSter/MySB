#!/bin/bash
# ----------------------------------
# shellcheck source=inc/includes_before
source "$(dirname "$0")"/../inc/includes_before
# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#	_\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#	 _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#	  _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#	   _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#		_\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#		 _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#		  _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
######################################################################
# https://computingforgeeks.com/how-to-setup-s3-compatible-object-storage-server-with-minio/
# https://www.digitalocean.com/community/tutorials/how-to-set-up-an-object-storage-server-using-minio-on-ubuntu-16-04
# Multi NginX location for each bucket: https://forum.nginx.org/read.php?11,281903
#
# https://docs.aws.amazon.com/fr_fr/AmazonS3/latest/dev/using-with-s3-actions.html
##################### FIRST LINE #####################################

#### Systemd
case "${gsSwitch}" in
    'INSTALL'|'UPGRADE')
        (! grep -q 'minio' /etc/group) && groupadd --system minio
        (! grep -q 'minio' /etc/passwd) && useradd -c "Minio system user" -d /home/minio -s /sbin/nologin --system -g minio minio
        install -v -o root -g root -m 0644 ${MySB_InstallDir}/templates/systemd/minio.service.tmpl /lib/systemd/system/minio.service
        systemctl daemon-reload
        systemctl enable minio.service
        install -d -v -o minio -g minio -m 0755 /etc/minio
        install -d -v -o minio -g minio -m 0755 /etc/minio/certs
        install -d -v -o minio -g minio -m 0755 /etc/minio/certs/CAs
        install -d -v -o minio -g minio -m 0755 /home/minio/data
        if [[ -f "/etc/letsencrypt/live/${gsHostNameFqdn}/privkey.pem" ]] && [[ -f "/etc/letsencrypt/live/${gsHostNameFqdn}/fullchain.pem" ]]; then
            install -v -o minio -g minio -m 0644 "/etc/letsencrypt/live/${gsHostNameFqdn}/privkey.pem" /etc/minio/certs/private.key
            install -v -o minio -g minio -m 0644 "/etc/letsencrypt/live/${gsHostNameFqdn}/fullchain.pem" /etc/minio/certs/public.crt
        elif [[ -f "${MySB_InstallDir}/ssl/mysb.key" ]] && [[ -f "${MySB_InstallDir}/ssl/mysb.cert" ]]; then
            install -v -o minio -g minio -m 0644 "${MySB_InstallDir}/ssl/mysb.key" /etc/minio/certs/private.key
            install -v -o minio -g minio -m 0644 "${MySB_InstallDir}/ssl/mysb.cert" /etc/minio/certs/public.crt
        fi

        # Seedbox user
        sUserValues="$(cmdMySQL 'MySB_db' "SELECT access_key,secret_key FROM minio WHERE id_users='${gnMainUserId}' AND policy='*-complete';" | sed 's/\t/|/g;')"
        sAccessKey="$(echo "${sUserValues}" | awk '{split($0,a,"|"); print a[1]}')"
        sSecretKey="$(echo "${sUserValues}" | awk '{split($0,a,"|"); print a[2]}')"
        if [ -z "${sAccessKey}" ] && [ -z "${sSecretKey}" ]; then
            sAccessKey="${sAccessKey:-$(gfnGenPassword 16)}"
            sSecretKey="${sSecretKey:-$(gfnGenPassword 32)}"
            cmdMySQL 'MySB_db' "INSERT INTO minio (id_users, access_key, secret_key, policy) VALUES ('${gnMainUserId}', '${sAccessKey}', '${sSecretKey}', '*-complete');"
        elif [ -z "${sAccessKey}" ] || [ -z "${sSecretKey}" ]; then
            sAccessKey="${sAccessKey:-$(gfnGenPassword 16)}"
            sSecretKey="${sSecretKey:-$(gfnGenPassword 32)}"
            cmdMySQL 'MySB_db' "UPDATE minio SET access_key='${sAccessKey}',secret_key='${sSecretKey}' WHERE id_users='${gnMainUserId}' AND policy='*-complete';"
        fi

        # Create a new user with canned policy
        install -v -o root -g root -m 0644 "${MySB_InstallDir}"/templates/minio/getonly.json.tmpl /tmp/getonly.json
        sed -i "s/bucketname/*-complete/g;" /tmp/getonly.json
        mc admin policy add mysb readonly /tmp/getonly.json

        if [ -n "${sSecretKey}" ] && [ -n "${sSecretKey}" ] && [ -n "${sPolicy}" ]; then
            # Create a new user
            mc admin user add mysb "${sAccessKey}" "${sSecretKey}"
            mc admin policy set mysb "readonly" user="${sAccessKey}"
        fi

        # Group
        mc admin group add mysb MySB_users "${sAccessKey}"
     ;;
esac

[ -f /etc/default/minio ] && source /etc/default/minio
MINIO_ACCESS_KEY="${MINIO_ACCESS_KEY:-$(gfnGenPassword 16)}"
MINIO_SECRET_KEY="${MINIO_SECRET_KEY:-$(gfnGenPassword 32)}"

#### /etc/default/minio
# if [ ! -f /etc/default/minio ]; then
    {
        echo "# Volume to be used for Minio server."
        echo "MINIO_VOLUMES=\"/home/minio/data\""
        echo "# Use if you want to run Minio on a custom port."
        echo "MINIO_OPTS=\"-C /etc/minio --address :9000 --address ${gsHostNameFqdn}:9000\""
        echo "# Access Key of the server."
        echo "MINIO_ACCESS_KEY=\"${MINIO_ACCESS_KEY}\""
        echo "# Secret key of the server."
        echo "MINIO_SECRET_KEY=\"${MINIO_SECRET_KEY}\""
        echo "# Enable or disable access to web UI"
        echo "MINIO_BROWSER=on"
    } >/etc/default/minio
# fi
chown minio:minio /etc/default/minio

#### Minio
fnInstallMinio() {
    gfnGetRepoValues 'Minio'

    if [ "${gsVersionInstalled}" != "${gsVersionLatest}" ]; then
        if [ -f "${MySB_Files}/${gsRepoFile}" ] && ( [ "${gsVersionLatest}" != "${gsVersionInstalled}" ] ); then
            mv -v "${MySB_Files}/${gsRepoFile}" "${MySB_Files}/${gsRepoFile}.tmp"
        fi
        gfnRepoManageByType
        if [ -f "${MySB_Files}/${gsRepoFile}" ] && ( [ "${gsVersionLatest}" != "${gsVersionInstalled}" ] ); then
            rm -fv "${MySB_Files}/${gsRepoFile}.tmp"
        fi
    fi
    chmod -v +x ${gsRepoDir}
    ${gsRepoDir} version
}

#### Minio client
fnInstallMinioClient() {
    gfnGetRepoValues 'Minio Client'

    if [ "${gsVersionInstalled}" != "${gsVersionLatest}" ]; then
        if [ -f "${MySB_Files}/${gsRepoFile}" ] && ( [ "${gsVersionLatest}" != "${gsVersionInstalled}" ] ); then
            mv -v "${MySB_Files}/${gsRepoFile}" "${MySB_Files}/${gsRepoFile}.tmp"
        fi
        gfnRepoManageByType
        if [ -f "${MySB_Files}/${gsRepoFile}" ] && ( [ "${gsVersionLatest}" != "${gsVersionInstalled}" ] ); then
            rm -fv "${MySB_Files}/${gsRepoFile}.tmp"
        fi
    fi
    chmod -v +x ${gsRepoDir}
    ${gsRepoDir} --version

    # Minio client host config (alias)
    mc config host add mysb https://${gsHostNameFqdn}:9000 ${MINIO_ACCESS_KEY} ${MINIO_SECRET_KEY} --api S3v4
}

#### Goofys
fnInstallGoofys() {
    gfnGetRepoValues 'Goofys'

    if [ "${gsVersionInstalled}" != "${gsVersionLatest}" ]; then
        [ -f "${MySB_Files}/${gsRepoFile}" ] && mv -v "${MySB_Files}/${gsRepoFile}" "${MySB_Files}/${gsRepoFile}.tmp"
        gfnRepoManageByType
        [ -f "${MySB_Files}/${gsRepoFile}" ] && rm -fv "${MySB_Files}/${gsRepoFile}.tmp"
    fi
    chmod -v +x ${gsRepoDir}
    ${gsRepoDir} --version
}

# Check for a new version / Install it
fnInstallMinio
fnInstallMinioClient
fnInstallGoofys

# Mark as installed
if gfnCheckCommand 0 /usr/local/bin/minio; then
    cmdMySQL 'MySB_db' "UPDATE services SET to_install='0',is_installed='1' WHERE serv_name='Minio';" -v
fi

# -----------------------------------------
# shellcheck source=inc/includes_after
source "$(dirname "$0")"/../inc/includes_after
# -----------------------------------------
##################### LAST LINE ######################################
