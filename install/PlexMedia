#!/bin/bash
# ----------------------------------
# shellcheck source=inc/includes_before
source "$(dirname "$0")"/../inc/includes_before
# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#	_\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#	 _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#	  _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#	   _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#		_\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#		 _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#		  _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
##################### FIRST LINE #####################################
#	TCP/UDP Ports: https://support.plex.tv/articles/201543147-what-network-ports-do-i-need-to-allow-through-my-firewall/
######################################################################

#### FUNCTIONs
# Plex plugins
function fnPlexPlugins() {
    local sPlexDir sAbsoScanSeriesUrl sAbsoScanMusicUrl sHamaRepo
    sPlexDir='/var/lib/plexmediaserver/Library/Application Support/Plex Media Server'
    sAbsoScanSeriesUrl='https://raw.githubusercontent.com/ZeroQI/Absolute-Series-Scanner/master/Scanners/Series/Absolute%20Series%20Scanner.py'
    sAbsoScanMusicUrl='https://raw.githubusercontent.com/ZeroQI/Absolute-Series-Scanner/master/Scanners/Music/Absolute%20Music%20Scanner.py'
    sHamaRepo="https://github.com/ZeroQI/Hama.bundle.git"

    # Absolute Scanner
    mkdir -p "${sPlexDir}"/Scanners/{Series,Music}
    ${binCURL} "${sAbsoScanSeriesUrl}" -o "${sPlexDir}/Scanners/Series/Absolute Series Scanner.py"
    ${binCURL} "${sAbsoScanMusicUrl}" -o "${sPlexDir}/Scanners/Music/Absolute Music Scanner.py"
    chown -R plex:plex "${sPlexDir}/Scanners/"
    chmod -R 775 "${sPlexDir}/Scanners/"

    # Hama
    [ ! -d "${sPlexDir}"/Plug-ins/Hama.bundle/ ] && git clone "${sHamaRepo}" "${sPlexDir}"/Plug-ins/Hama.bundle
    cd "${sPlexDir}"/Plug-ins/Hama.bundle || exit 1
    git reset --hard
    git pull
    chown -R plex:plex "${sPlexDir}"/Plug-ins/Hama.bundle/
    chmod -R 775 "${sPlexDir}"/Plug-ins/Hama.bundle/
}

# Install Plex DEB package
function fnInstallDebPackage() {
    local sServices

    # Loading repository informations
    gfnGetRepoValues 'Plex Media Server'

    # Change architecture if needed
    case $(getconf LONG_BIT) in
        32) gsRepoURL="${gsRepoURL//x86_64/i686}" ;;
    esac

    # Install Plex if needed
    if [ "${gsVersionLatest}" != "${gsVersionInstalled}" ]; then
        # Services to stop
        sServices="plexmediaserver"
        [ "${gbIsInstalled_Tautulli}" == "YES" ] && sServices="${sServices} tautulli"

        # Download DEB file
        [ -f "${gsRepoDir}/${gsRepoFile}" ] && mv -v "${gsRepoDir}/${gsRepoFile}" "${gsRepoDir}/${gsRepoFile}.tmp"
        gfnRepoManageByType
        [ -f "${gsRepoDir}/${gsRepoFile}" ] && rm -fv "${gsRepoDir}/${gsRepoFile}.tmp"

        # Stop services
        gfnManageServices stop "${sServices}"

        if [ -f "${gsRepoDir}/${gsRepoFile}" ]; then
            (! dpkg -i "${gsRepoDir}/${gsRepoFile}") && dpkg -i "${gsRepoDir}/${gsRepoFile}"
            systemctl disable plexmediaserver
            systemctl daemon-reload
        fi

        # Stop services again
        gfnManageServices stop "${sServices}"

        # Preferences.xml
        sPreferencesFile='/var/lib/plexmediaserver/Library/Application Support/Plex Media Server/Preferences.xml'
        if [ -f "${sPreferencesFile}" ]; then
            perl -pi -e 's/\"\/>/\" \/>/g' "${sPreferencesFile}"
            sNewPreferences=()
            for sParam in $(cat "${sPreferencesFile}"); do
                case "$(echo "${sParam}" | cut -d '=' -f 1)" in
                    'OldestPreviousVersion') sNewPreferences+=("${sParam}") ;;
                    'MachineIdentifier') sNewPreferences+=("${sParam}") ;;
                    'ProcessedMachineIdentifier') sNewPreferences+=("${sParam}") ;;
                    'AnonymousMachineIdentifier') sNewPreferences+=("${sParam}") ;;
                    'MetricsEpoch') sNewPreferences+=('MetricsEpoch="1"') ;;
                    'AcceptedEULA') sNewPreferences+=('AcceptedEULA="1"') ;;
                    'FriendlyName') sNewPreferences+=('FriendlyName="MySB"') ;;
                    'PublishServerOnPlexOnlineKey') sNewPreferences+=('PublishServerOnPlexOnlineKey="1"') ;;
                    'PlexOnlineToken') sNewPreferences+=("${sParam}") ;;
                    'PlexOnlineUsername') sNewPreferences+=("${sParam}") ;;
                    'PlexOnlineMail') sNewPreferences+=("${sParam}") ;;
                    'PlexOnlineHome') sNewPreferences+=('PlexOnlineHome="1"') ;;
                    'DlnaEnabled') sNewPreferences+=('DlnaEnabled="0"') ;;
                    'CertificateVersion') sNewPreferences+=("${sParam}") ;;
                    'PubSubServer') sNewPreferences+=("${sParam}") ;;
                    'PubSubServerRegion') sNewPreferences+=("${sParam}") ;;
                    'PubSubServerPing') sNewPreferences+=("${sParam}") ;;
                    'FSEventLibraryPartialScanEnabled') sNewPreferences+=('FSEventLibraryPartialScanEnabled="1"') ;;
                    'FSEventLibraryUpdatesEnabled') sNewPreferences+=('FSEventLibraryUpdatesEnabled="1"') ;;
                    'ScheduledLibraryUpdateInterval') sNewPreferences+=('ScheduledLibraryUpdateInterval="1800"') ;;
                    'ScheduledLibraryUpdatesEnabled') sNewPreferences+=('ScheduledLibraryUpdatesEnabled="1"') ;;
                    'GdmEnabled') sNewPreferences+=('GdmEnabled="0"') ;;
                    'PreferredNetworkInterface') sNewPreferences+=("PreferredNetworkInterface=\"${gsPrimaryInet}\"") ;;
                    'secureConnections') sNewPreferences+=("${sParam}") ;;
                    'DlnaReportTimeline') sNewPreferences+=('DlnaReportTimeline="0"') ;;
                    'LanguageInCloud') sNewPreferences+=("${sParam}") ;;
                    'GracenoteUser') sNewPreferences+=("${sParam}") ;;
                    'EnableIPv6') sNewPreferences+=('EnableIPv6="0"') ;;
                esac
            done
            {
                echo '<?xml version="1.0" encoding="utf-8"?>'
                echo "<Preferences ${sNewPreferences[*]} />"
            } >"${sPreferencesFile}"
            aParams=('MetricsEpoch' 'AcceptedEULA' 'FriendlyName' 'PublishServerOnPlexOnlineKey' 'PlexOnlineHome' 'DlnaEnabled' 'FSEventLibraryPartialScanEnabled' 'FSEventLibraryUpdatesEnabled' 'ScheduledLibraryUpdatesEnabled' 'GdmEnabled' 'PreferredNetworkInterface' 'DlnaReportTimeline' 'EnableIPv6')
            for sParam in "${aParams[@]}"; do
                (! grep -q "${sParam}" "${sPreferencesFile}") && {
                    case "${sParam}" in
                        'MetricsEpoch') perl -pi -e 's/<Preferences/<Preferences MetricsEpoch="1"/g' "${sPreferencesFile}" ;;
                        'AcceptedEULA') perl -pi -e 's/<Preferences/<Preferences AcceptedEULA="1"/g' "${sPreferencesFile}" ;;
                        'FriendlyName') perl -pi -e 's/<Preferences/<Preferences FriendlyName="MySB"/g' "${sPreferencesFile}" ;;
                        'PublishServerOnPlexOnlineKey') perl -pi -e 's/<Preferences/<Preferences PublishServerOnPlexOnlineKey="1"/g' "${sPreferencesFile}" ;;
                        'PlexOnlineHome') perl -pi -e 's/<Preferences/<Preferences PlexOnlineHome="1"/g' "${sPreferencesFile}" ;;
                        'DlnaEnabled') perl -pi -e 's/<Preferences/<Preferences DlnaEnabled="0"/g' "${sPreferencesFile}" ;;
                        'FSEventLibraryPartialScanEnabled') perl -pi -e 's/<Preferences/<Preferences FSEventLibraryPartialScanEnabled="1"/g' "${sPreferencesFile}" ;;
                        'FSEventLibraryUpdatesEnabled') perl -pi -e 's/<Preferences/<Preferences FSEventLibraryUpdatesEnabled="1"/g' "${sPreferencesFile}" ;;
                        'ScheduledLibraryUpdatesEnabled') perl -pi -e 's/<Preferences/<Preferences ScheduledLibraryUpdatesEnabled="1"/g' "${sPreferencesFile}" ;;
                        'GdmEnabled') perl -pi -e 's/<Preferences/<Preferences GdmEnabled="0"/g' "${sPreferencesFile}" ;;
                        'PreferredNetworkInterface') perl -pi -e "s/<Preferences/<Preferences PreferredNetworkInterface=\"${gsPrimaryInet}\"/g" "${sPreferencesFile}" ;;
                        'DlnaReportTimeline') perl -pi -e 's/<Preferences/<Preferences DlnaReportTimeline="0"/g' "${sPreferencesFile}" ;;
                        'EnableIPv6') perl -pi -e 's/<Preferences/<Preferences EnableIPv6="0"/g' "${sPreferencesFile}" ;;
                    esac
                }
            done
            cat "${sPreferencesFile}"
        fi

        # Plugins
        fnPlexPlugins

        # Start services
        gfnManageServices start "${sServices}"
    else
        echo "PlexMedia version ${gsRepoVersion} is already installed"
    fi

    # Update DB
    cmdMySQL 'MySB_db' "UPDATE services SET to_install = '0', is_installed = '1' WHERE serv_name='Plex Media Server';" -v
}

# Install Tautulli
function fnInstallZipTautulli() {
    local sRepoDirEscaped

    # Install packages
    sPackages=(python python-setuptools tzdata)
    gfnPackageBundleInstall "${sPackages[@]}"

    # Get Tautulli infos
    gfnGetRepoValues 'Tautulli'
    [[ $? -ne 0 ]] && return 1

    # VARs
    sRepoDirEscaped="$(echo "${gsRepoDir}" | sed s,/,\\\\\/,g)"

    # Need upgrade or install ?
    if [ "${gbIsInstalled_Tautulli}" == "NO" ] || [ "${gsVersionLatest}" != "${gsVersionInstalled}" ]; then
        # Python
        [[ -z "$(pip list --format=columns | grep 'pycryptodome')" ]] && pip install PyCryptodome

        # Get file & Extract datas
        if [ -f "${MySB_Files}/${gsRepoFile}" ] && ([ "${gsVersionLatest}" != "${gsVersionInstalled}" ]); then
            mv -v "${MySB_Files}/${gsRepoFile}" "${MySB_Files}/${gsRepoFile}.tmp"
        fi
        gfnRepoManageByType
        if [ -f "${MySB_Files}/${gsRepoFile}" ] && ([ "${gsVersionLatest}" != "${gsVersionInstalled}" ]); then
            rm -fv "${MySB_Files}/${gsRepoFile}.tmp"
        fi

        if [ -n "${gsRepoDir}" ] && [ -d "${gsRepoDir}" ]; then
            [ "${gbIsInstalled_Tautulli}" == "YES" ] && gfnManageServices stop "tautulli"

            # Backup if needed
            [ -f "${gsRepoDir}"/config.ini ] && mv -v "${gsRepoDir}"/config.ini ${MySB_InstallDir}/temp/tautulli_conf
            [ -f "${gsRepoDir}"/tautulli.db ] && mv -v "${gsRepoDir}"/tautulli.db ${MySB_InstallDir}/temp/tautulli_db
            [ -d "${gsRepoDir}"/backups ] && mv -v "${gsRepoDir}"/backups ${MySB_InstallDir}/temp/tautulli_backups
            [ -d "${gsRepoDir}"/logs ] && mv -v "${gsRepoDir}"/logs ${MySB_InstallDir}/temp/tautulli_logs
            [ -d "${gsRepoDir}"/cache ] && mv -v "${gsRepoDir}"/cache ${MySB_InstallDir}/temp/tautulli_cache

            # System user
            (! grep -q 'tautulli' /etc/group) && addgroup tautulli
            (! grep -q 'tautulli' /etc/passwd) && adduser --system --no-create-home tautulli --ingroup tautulli

            if [ "${gbIsInstalled_Tautulli}" == "YES" ]; then
                # Remove datas
                ([ -f "${MySB_Files}/${gsRepoFile}" ] && [ -d "${gsRepoDir}" ]) && gfnDeleteDirectory 1 "${gsRepoDir}"

                # Extract datas
                gfnRepoManageByType
            fi

            # Restore if needed
            [ -f ${MySB_InstallDir}/temp/tautulli_conf ] && mv -v ${MySB_InstallDir}/temp/tautulli_conf "${gsRepoDir}"/config.ini
            [ -f ${MySB_InstallDir}/temp/tautulli_db ] && mv -v ${MySB_InstallDir}/temp/tautulli_db "${gsRepoDir}"/tautulli.db
            [ -d ${MySB_InstallDir}/temp/tautulli_backups ] && mv -v ${MySB_InstallDir}/temp/tautulli_backups "${gsRepoDir}"/backups
            [ -d ${MySB_InstallDir}/temp/tautulli_logs ] && mv -v ${MySB_InstallDir}/temp/tautulli_logs "${gsRepoDir}"/logs
            [ -d ${MySB_InstallDir}/temp/tautulli_cache ] && mv -v ${MySB_InstallDir}/temp/tautulli_cache "${gsRepoDir}"/cache

            # Directories
            [ ! -d "${gsRepoDir}"/backups ] && mkdir "${gsRepoDir}"/backups
            [ ! -d "${gsRepoDir}"/logs ] && mkdir "${gsRepoDir}"/logs
            [ ! -d "${gsRepoDir}"/cache ] && mkdir "${gsRepoDir}"/cache

            # Directory rights
            chown -R tautulli:tautulli "${gsRepoDir}"
            chmod -v 0760 "${gsRepoDir}"/*.py

            # Systemd
            install -v -o root -g root -m 0644 ${MySB_InstallDir}/templates/systemd/tautulli.service.tmpl /lib/systemd/system/tautulli.service
            perl -pi -e "s/<gsRepoDir>/${sRepoDirEscaped}/g" /lib/systemd/system/tautulli.service
            systemctl daemon-reload
            systemctl enable tautulli.service

            # NginX
            install -v -o root -g root -m 0600 ${MySB_InstallDir}/templates/nginx/etc.nginx.locations.tautulli.conf.tmpl /etc/nginx/locations/Tautulli.conf
            install -v -o root -g root -m 0600 ${MySB_InstallDir}/templates/nginx/etc.nginx.proxy.tautulli.conf.tmpl /etc/nginx/proxy/Tautulli.conf
            perl -pi -e "s/<MainUser>/${gsMainUserName}/g" /etc/nginx/locations/Tautulli.conf

            # Update certificates for Python
            update-ca-certificates --fresh &>/dev/null

            # START/STOP service for creating config.ini
            systemctl start tautulli.service
            systemctl status tautulli.service
            sleep 1
            systemctl stop tautulli.service
            sleep 1

            # Config.ini
            nNumLine=$(grep 'http_root =' -n -m 1 "${gsRepoDir}"/config.ini | cut -d ':' -f 1)
            sed -i '/http_root =/d' "${gsRepoDir}"/config.ini
            sed -i "${nNumLine}i\http_root = /tt" "${gsRepoDir}"/config.ini
            nNumLine=$(grep 'http_base_url =' -n -m 1 "${gsRepoDir}"/config.ini | cut -d ':' -f 1)
            sed -i '/http_base_url =/d' "${gsRepoDir}"/config.ini
            sed -i "${nNumLine}i\http_base_url = https://${gsHostNameFqdn}:${gsPort_MySB_HTTPS}" "${gsRepoDir}"/config.ini
            nNumLine=$(grep 'https_cert_chain =' -n -m 1 "${gsRepoDir}"/config.ini | cut -d ':' -f 1)
            sed -i '/https_cert =/d' "${gsRepoDir}"/config.ini
            sed -i '/https_key =/d' "${gsRepoDir}"/config.ini
            sed -i '/https_cert_chain =/d' "${gsRepoDir}"/config.ini
            if ([ -f /etc/letsencrypt/live/${gsHostNameFqdn}/fullchain.pem ] && [ -f /etc/letsencrypt/live/${gsHostNameFqdn}/privkey.pem ]); then
                sed -i "${nNumLine}i\https_cert = /etc/letsencrypt/live/${gsHostNameFqdn}/cert.pem" "${gsRepoDir}"/config.ini
                sed -i "${nNumLine}i\https_key = /etc/letsencrypt/live/${gsHostNameFqdn}/privkey.pem" "${gsRepoDir}"/config.ini
                sed -i "${nNumLine}i\https_cert_chain = /etc/letsencrypt/live/${gsHostNameFqdn}/fullchain.pem" "${gsRepoDir}"/config.ini
            else
                sed -i "${nNumLine}i\https_cert = ${MySB_InstallDir}/ssl/mysb.cert" "${gsRepoDir}"/config.ini
                sed -i "${nNumLine}i\https_key = ${MySB_InstallDir}/ssl/mysb.key" "${gsRepoDir}"/config.ini
                sed -i "${nNumLine}i\https_cert_chain = \"\"" "${gsRepoDir}"/config.ini
            fi

            # START services
            gfnManageServices start "plexmediaserver nginx tautulli"

            # Force update users' table history
            #sqlite3 -echo -cmd '.timeout 150000' "${gsRepoDir}"/tautulli.db "UPDATE users SET do_notify='1', keep_history='1' WHERE 1;"
        fi
    else
        echo "Tautulli version ${gsRepoVersion} is already installed"
    fi

    if [ -f "${gsRepoDir}"/Tautulli.py ]; then
        # Update DB
        cmdMySQL 'MySB_db' "UPDATE services SET to_install = '0', is_installed = '1' WHERE serv_name='Tautulli';" -v
        # Disable the upgrade job
        # cmdMySQL 'MySB_db' "UPDATE repositories SET upgrade='0' WHERE name='Tautulli';" -v
    fi
}

#### CRON UPGRADE
if [ "${gsSwitch}" == "CRON" ] && [ "${gbIsInstalled_PlexMedia}" == "YES" ]; then
    # Check for a new version / Install it
    fnInstallDebPackage
    if gfnCheckCommand 0 plexmediaserver; then
        fnInstallZipTautulli
    fi
fi

#### INSTALL
if [ "${gbToInstall_PlexMedia}" == "YES" ]; then
    #### Install package
    sPackages=(alsa-oss oss-compat libasound2-plugins)
    gfnPackageBundleInstall "${sPackages[@]}"

    #### Install DEB package
    fnInstallDebPackage

    #### NginX
    install -v -o root -g root -m 0600 ${MySB_InstallDir}/templates/nginx/etc.nginx.locations.plexmediaserver.conf.tmpl /etc/nginx/locations/PlexMediaServer.conf
    install -v -o root -g root -m 0600 ${MySB_InstallDir}/templates/nginx/etc.nginx.upstream.plexmediaserver.conf.tmpl /etc/nginx/upstream/PlexMediaServer.conf
    install -v -o root -g root -m 0600 ${MySB_InstallDir}/templates/nginx/etc.nginx.proxy.plexmediaserver.conf.tmpl /etc/nginx/proxy/PlexMediaServer.conf

    if gfnCheckCommand 0 plexmediaserver; then
        fnInstallZipTautulli
    fi
fi

# -----------------------------------------
# shellcheck source=inc/includes_after
source "$(dirname "$0")"/../inc/includes_after
# -----------------------------------------
##################### LAST LINE ######################################
