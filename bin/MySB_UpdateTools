#!/bin/bash
# rev 6.0
# ----------------------------------
# shellcheck source=inc/includes_before
. "$(dirname "$0")"/../inc/includes_before
# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#	_\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#	 _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#	  _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#	   _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#		_\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#		 _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#		  _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
##################### FIRST LINE #####################################

#### PlexMedia & Tautulli update
if [ "${gbIsInstalled_PlexMedia}" == "YES" ]; then
    log_daemon_msg "${UpdateTools_Plex[*]}"
    gfnScriptInvoke 'ScreenSTD' "${MySB_InstallDir}/install/PlexMedia" 'CRON'
    gfnStatusLSB
fi

#### DNScrypt-proxy
if gfnCheckCommand 0 dnscrypt-proxy; then
    log_daemon_msg "${UpdateTools_DNScrypt[*]}"
    gfnScriptInvoke 'ScreenSTD' "${MySB_InstallDir}/install/DNScrypt" 'CRON'
    gfnStatusLSB
fi

#### Minio
# if gfnCheckCommand 0 minio; then
#     log_daemon_msg "${UpdateTools_Minio[*]}"
#     gfnScriptInvoke 'ScreenSTD' "${MySB_InstallDir}/install/S3" 'CRON'
#     gfnStatusLSB
# fi

#### Docker tools
# if gfnCheckCommand 0 docker; then
#     log_daemon_msg "${UpdateTools_DockerTools[*]}"
#     gfnScriptInvoke 'ScreenSTD' "${MySB_InstallDir}/install/Docker" 'CRON'
#     gfnStatusLSB
# fi

bRtorrentRestart=0
gfnListCountUsers 'normal'

#### ruTorrent
sVersionDB="$(cmdMySQL 'MySB_db' "SELECT version FROM repositories WHERE name='ruTorrent';")"
sVersionInstalled="$(cat "${gsRutorrentDir}"/version)"
if [ -n "${sVersionDB}" ] && [ "${sVersionDB}" != "${sVersionInstalled}" ]; then
    cmdMySQL 'MySB_db' "DELETE FROM repositories;" -v
    mysql --defaults-extra-file=/root/.config.cnf --database=MySB_db --verbose <"$MySB_InstallDir/templates/mysql/Table_repositories.sql"
    cmdMySQL 'MySB_db' "UPDATE repositories SET upgrade = '1' WHERE name='ruTorrent';" -v
    gfnScriptInvoke 'ScreenSTD' "${MySB_InstallDir}/install/ruTorrent" 'UPGRADE'
fi

#### rTorrent scripts (to leave for next version ;-)
for sUser in ${gsUsersList}; do
    (! grep -q 'rev 0.9' "/etc/init.d/rtorrent-${sUser}") && bRtorrentRestart=1
    (! grep -q 'rev 0.8' /home/${sUser}/.rTorrent_erased.sh) && bRtorrentRestart=1
    (! grep -q 'rev 0.8' /home/${sUser}/.rTorrent_finished.sh) && bRtorrentRestart=1
    (! grep -q 'rev 0.8' /home/${sUser}/.rTorrent_inserted_new.sh) && bRtorrentRestart=1
    (! grep -q 'rev 0.8' /home/${sUser}/.rTorrent_tasks.sh) && bRtorrentRestart=1
    (! grep -q 'rev 0.8' /home/${sUser}/.rTorrent_tasks.sh) && bRtorrentRestart=1
    (! grep -q 'rev 0.9' /home/${sUser}/scripts/synchro.sh) && bRtorrentRestart=1
done

#### rTorrent restart needed
if [[ ${bRtorrentRestart} -eq 1 ]]; then
    for sUser in ${gsUsersList}; do
        gfnManageServices stop "rtorrent-${sUser}"

        # init.d
        install -o root -g root -m 0755 "${MySB_InstallDir}"/templates/rtorrent/etc.init.d.rtorrent.tmpl /etc/init.d/rtorrent-"${sUser}"
        perl -pi -e "s/<username>/${sUser}/g" /etc/init.d/rtorrent-"${sUser}"
        systemctl daemon-reload &>/dev/null
        systemctl disable rtorrent-"${sUser}" &>/dev/null
        rm -f /home/.check_annoncers_"${sUser}".*

        gfnManageServices start "rtorrent-${sUser}"

        # Add users allowed commands to sudoers.d (used by rTorrent scripts)
        {
            echo "${sUser} ALL= EXEC: NOPASSWD: /bin/cp -av /home/*/rtorrent/* /home/${sUser}/rtorrent/complete/*"
            echo "${sUser} ALL= EXEC: NOPASSWD: /bin/cp -alv /home/*/rtorrent/* /home/${sUser}/rtorrent/complete/*"
            echo "${sUser} ALL= EXEC: NOPASSWD: /bin/chown -Rv ${sUser}\:${sUser} /home/${sUser}/rtorrent/complete/*"
            echo "${sUser} ALL= EXEC: NOPASSWD: /bin/chown -Rv ${sUser}\:MySB_users /home/${sUser}/rtorrent/complete/*"
            echo "${sUser} ALL= EXEC: NOPASSWD: /bin/bash ${MySB_InstallDir}/scripts/GetTrackersCert.bsh USER ${sUser} [A-Z0-9]*"
            echo "${sUser} ALL= EXEC: NOPASSWD: /bin/bash /home/${sUser}/.rTorrent_tasks.sh*"
        } >"/etc/sudoers.d/MySB_${sUser}"
        chmod 0440 "/etc/sudoers.d/MySB_${sUser}"
    done
    # gfnManageServices stop "sudo"
fi

#### Cron jobs
if (! grep -q 'rev 0.6' /etc/cron.d/MySB_jobs_check); then
    gfnScriptInvoke 'ScreenSTD' "${MySB_InstallDir}/install/Cron" 'UPGRADE'
fi

#### NodeJS
if [ -f /etc/apt/sources.list.d/nodejs.list ]; then
    # Remove old NojeJS version
    [ -z "${funcs_Install}" ] && source ${MySB_InstallDir}/inc/funcs_by_script/funcs_Install
    gfnPackagesManage purge "nodejs"
    # Remove NodeJS sources
    rm -fv /etc/apt/sources.list.d/nodejs.list
    [ -d /var/spool/apt-mirror/mirror/deb.nodesource.com/ ] && rm -rfv /var/spool/apt-mirror/mirror/deb.nodesource.com/
    # Install NodeJs from deb
    sPackages=("${MySB_Files}"/nodejs*.deb yarn)
    gfnPackagesManage install "${sPackages[@]}"
    npm install -g npm-check-updates
    npm install -g bower
    bower update --allow-root
    # Reinstall Cakebox
    if [ "${gbToInstall_Cakebox}" == "YES" ] || [ "${gbIsInstalled_Cakebox}" == "YES" ]; then
        cmdMySQL 'MySB_db' "UPDATE services SET to_install = '1' WHERE serv_name='CakeBox-Light';"
        gfnScriptInvoke 'ScreenSTD' "${MySB_InstallDir}/install/CakeboxLight" 'UPGRADE'
    fi
fi

#### SystemD
if (grep -q '^Requires' /lib/systemd/system/MySB_SecurityRules_Init.service); then
    install -v -o root -g root -m 0644 ${MySB_InstallDir}/templates/systemd/MySB_SecurityRules_Init.service.tmpl /lib/systemd/system/MySB_SecurityRules_Init.service
    perl -pi -e "s/<InstallDir>/${gsInstallDirEscaped}/g" /lib/systemd/system/MySB_SecurityRules_Init.service
    systemctl daemon-reload
    systemctl enable MySB_SecurityRules_Init.service

    install -v -o root -g root -m 0644 ${MySB_InstallDir}/templates/systemd/dnscrypt-proxy.service.tmpl /lib/systemd/system/dnscrypt-proxy.service
    perl -pi -e "s/<InstallDir>/${gsInstallDirEscaped}/g" /lib/systemd/system/dnscrypt-proxy.service
    systemctl daemon-reload
    systemctl enable dnscrypt-proxy.service
fi

#### PeerGuardian
if (! grep -q 'CHAINS=' /etc/pgl/pglcmd.conf); then
    install -v -o root -g root -m 0644 "${MySB_InstallDir}"/templates/other/etc.pgl.pglcmd.conf.tmpl /etc/pgl/pglcmd.conf
    source "${MySB_InstallDir}"/inc/funcs_by_script/funcs_PeerGuardian
    gfnPeerGuardianPglcmdConf 0
    gfnPeerGuardianAllowP2P 0
    rm -fv /etc/pgl/ipv6.*
    gfnPeerGuardianBlocklistsList 0 "CreateFile"
    {
        echo "if \$msg contains '[MySB]' or \$msg contains '[PeerGuardian]' then /var/log/iptables.log"
        echo "& stop"
    } >/etc/rsyslog.d/iptables.conf
    gfnManageServices start "rsyslog pglcmd"
fi

#### NextCloud MySB_Home missing
nMountsCount="$(cmdMySQL 'NextCloud_db' "SELECT mount_id FROM nc_external_mounts WHERE mount_point='/MySB_Home';" | wc -l)"
if [[ ${gnTotalUsers} -ne ${nMountsCount} ]]; then
    for nId in $(cmdMySQL 'NextCloud_db' "SELECT mount_id FROM nc_external_mounts WHERE mount_point='/MySB_Home';"); do
        su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ files_external:delete ${nId} --yes"
    done

    for seedUser in ${gsUsersList}; do
        if [ ! -d /home/nextcloud/"${seedUser}" ]; then
            mkdir -v /home/nextcloud/"${seedUser}"
            chown -v www-data:www-data /home/nextcloud/"${seedUser}"
            chmod -v 0755 /home/nextcloud/"${seedUser}"
        fi

        IdStorage=$(su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ files_external:create MySB_Home local null::null" | awk '{ print $5 }')
        if [ -n "${IdStorage}" ]; then
            su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ files_external:applicable --add-user \"${seedUser}\" ${IdStorage}"
            su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ files_external:config ${IdStorage} datadir '/home/${seedUser}/'"
            su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ files_external:option ${IdStorage} encrypt 'false'"
            su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ files_external:option ${IdStorage} previews 'true'"
            su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ files_external:option ${IdStorage} enable_sharing 'true'"
            su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ files_external:option ${IdStorage} encoding_compatibility 'false'"
            su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ files_external:verify ${IdStorage}"
        fi

        unset IdStorage FnUserMail
    done
fi

# -----------------------------------------
# shellcheck source=inc/includes_after
. "$(dirname "$0")"/../inc/includes_after
# -----------------------------------------
##################### LAST LINE ######################################
